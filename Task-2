import random

# Constants for player types
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

# Function to print the board
def print_board(board):
    for i in range(3):
        print(" | ".join(board[i]))
        if i < 2:
            print("-" * 9)

# Function to check if the current player has won
def check_win(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all([cell == player for cell in board[i]]):  # Check row
            return True
        if all([board[j][i] == player for j in range(3)]):  # Check column
            return True
    if all([board[i][i] == player for i in range(3)]):  # Check diagonal
        return True
    if all([board[i][2 - i] == player for i in range(3)]):  # Check anti-diagonal
        return True
    return False

# Function to check if the board is full
def is_full(board):
    return all(cell != EMPTY for row in board for cell in row)

# Minimax algorithm with Alpha-Beta Pruning
def minimax(board, depth, is_maximizing, alpha, beta):
    # Evaluate board state
    if check_win(board, PLAYER_X):
        return 10 - depth  # AI wins
    if check_win(board, PLAYER_O):
        return depth - 10  # Player O wins
    if is_full(board):
        return 0  # Draw

    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X  # AI's move
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = EMPTY  # Undo move
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break  # Beta cut-off
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O  # Player's move
                    eval = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = EMPTY  # Undo move
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break  # Alpha cut-off
        return min_eval

# Function to find the best move for the AI using Minimax
def best_move(board):
    best_val = float('-inf')
    move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X  # AI's move
                move_val = minimax(board, 0, False, float('-inf'), float('inf'))
                board[i][j] = EMPTY  # Undo move
                if move_val > best_val:
                    best_val = move_val
                    move = (i, j)
    return move

# Function to play the game
def play_game():
    board = [[EMPTY for _ in range(3)] for _ in range(3)]
    current_player = PLAYER_O  # Human player goes first
    
    while True:
        print_board(board)
        
        # Check if game over
        if check_win(board, PLAYER_X):
            print("AI (X) wins!")
            break
        if check_win(board, PLAYER_O):
            print("Player (O) wins!")
            break
        if is_full(board):
            print("It's a draw!")
            break
        
        if current_player == PLAYER_O:
            # Human player's move
            row = int(input("Enter row (0-2): "))
            col = int(input("Enter column (0-2): "))
            if board[row][col] == EMPTY:
                board[row][col] = PLAYER_O
                current_player = PLAYER_X  # Switch to AI
            else:
                print("Cell already taken. Try again.")
        else:
            # AI's move
            print("AI is making its move...")
            row, col = best_move(board)
            board[row][col] = PLAYER_X
            current_player = PLAYER_O  # Switch to human player

# Start the game
if __name__ == "__main__":
    play_game()
